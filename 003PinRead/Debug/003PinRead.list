
003PinRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000004  20000004  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  08000374  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08000374  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
  9 .debug_info   000004ae  00000000  00000000  0001039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000172  00000000  00000000  0001084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00000313  00000000  00000000  000109be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000050  00000000  00000000  00010cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000000b0  00000000  00000000  00010d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00000f58  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00000715  00000000  00000000  00011d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00003c0d  00000000  00000000  00012445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00016052  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000006c  00000000  00000000  000160a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08000354 	.word	0x08000354

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08000354 	.word	0x08000354

0800017c <main>:

void delay_func(uint32_t volatile delay);


int main(void)
{
 800017c:	b430      	push	{r4, r5}

	uint32_t volatile *pPortAmodereg = (uint32_t*)0x48000000;
	uint32_t volatile *pPortAinreg = (uint32_t*)0x48000010;

	// 1. Enable the clock for GPIOB / GPIOA peripheral in the AHB2ENR
	*pClkctrlreg |= (3 << 0);
 800017e:	4d48      	ldr	r5, [pc, #288]	; (80002a0 <main+0x124>)


	// 2. Configure the mode of the IO pin as output
	//a. Clear 11th, 10th, 1st and 0th bits
	*pPortBmodereg &= ~(3 << 10);
 8000180:	4a48      	ldr	r2, [pc, #288]	; (80002a4 <main+0x128>)
	*pClkctrlreg |= (3 << 0);
 8000182:	682b      	ldr	r3, [r5, #0]
	*pPortAmodereg &= ~(3 << 25);


	while(1){
		//Read the pin status of the pin PA12 (GPIO INPUT DATA REGISTER)
		uint16_t pin_status = (uint16_t)*pPortAinreg & (1 << 12); // zero out all the bits except bit 12
 8000184:	4c48      	ldr	r4, [pc, #288]	; (80002a8 <main+0x12c>)
			delay_func(100000);
			*pPortBoutreg &= ~(1 << 1);
			delay_func(100000);
		}else{
			//toggle the LED slower
			*pPortBoutreg |= (1 << 5);
 8000186:	4849      	ldr	r0, [pc, #292]	; (80002ac <main+0x130>)
 8000188:	4949      	ldr	r1, [pc, #292]	; (80002b0 <main+0x134>)
	*pClkctrlreg |= (3 << 0);
 800018a:	f043 0303 	orr.w	r3, r3, #3
 800018e:	602b      	str	r3, [r5, #0]
	*pPortBmodereg &= ~(3 << 10);
 8000190:	6815      	ldr	r5, [r2, #0]
 8000192:	4b48      	ldr	r3, [pc, #288]	; (80002b4 <main+0x138>)
 8000194:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 8000198:	6015      	str	r5, [r2, #0]
	*pPortBmodereg &= ~(3 << 0);
 800019a:	6815      	ldr	r5, [r2, #0]
 800019c:	f025 0503 	bic.w	r5, r5, #3
 80001a0:	6015      	str	r5, [r2, #0]
	*pPortBmodereg &= ~(3 << 2);
 80001a2:	6815      	ldr	r5, [r2, #0]
 80001a4:	f025 050c 	bic.w	r5, r5, #12
 80001a8:	6015      	str	r5, [r2, #0]
	*pPortBmodereg |= (1 << 10);
 80001aa:	6815      	ldr	r5, [r2, #0]
 80001ac:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80001b0:	6015      	str	r5, [r2, #0]
	*pPortBmodereg |= (1 << 0);
 80001b2:	6815      	ldr	r5, [r2, #0]
 80001b4:	f045 0501 	orr.w	r5, r5, #1
 80001b8:	6015      	str	r5, [r2, #0]
	*pPortBmodereg |= (1 << 2);
 80001ba:	6815      	ldr	r5, [r2, #0]
 80001bc:	f045 0504 	orr.w	r5, r5, #4
 80001c0:	6015      	str	r5, [r2, #0]
	*pPortAmodereg &= ~(3 << 25);
 80001c2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 80001c6:	682a      	ldr	r2, [r5, #0]
 80001c8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80001cc:	602a      	str	r2, [r5, #0]
		uint16_t pin_status = (uint16_t)*pPortAinreg & (1 << 12); // zero out all the bits except bit 12
 80001ce:	6822      	ldr	r2, [r4, #0]
		if(pin_status){
 80001d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80001d4:	d033      	beq.n	800023e <main+0xc2>
			*pPortBoutreg |= (1 << 5);
 80001d6:	6802      	ldr	r2, [r0, #0]
 80001d8:	f042 0220 	orr.w	r2, r2, #32
 80001dc:	6002      	str	r2, [r0, #0]

	//for(;;);
}

void delay_func(uint32_t volatile delay){
	for(uint32_t i = 0 ; i < delay ; i++ );
 80001de:	2200      	movs	r2, #0
 80001e0:	3201      	adds	r2, #1
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d3fc      	bcc.n	80001e0 <main+0x64>
			*pPortBoutreg &= ~(1 << 5);
 80001e6:	6802      	ldr	r2, [r0, #0]
 80001e8:	f022 0220 	bic.w	r2, r2, #32
 80001ec:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 80001ee:	2200      	movs	r2, #0
 80001f0:	3201      	adds	r2, #1
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d3fc      	bcc.n	80001f0 <main+0x74>
			*pPortBoutreg |= (1 << 0);
 80001f6:	6802      	ldr	r2, [r0, #0]
 80001f8:	f042 0201 	orr.w	r2, r2, #1
 80001fc:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 80001fe:	2200      	movs	r2, #0
 8000200:	3201      	adds	r2, #1
 8000202:	429a      	cmp	r2, r3
 8000204:	d3fc      	bcc.n	8000200 <main+0x84>
			*pPortBoutreg &= ~(1 << 0);
 8000206:	6802      	ldr	r2, [r0, #0]
 8000208:	f022 0201 	bic.w	r2, r2, #1
 800020c:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 800020e:	2200      	movs	r2, #0
 8000210:	3201      	adds	r2, #1
 8000212:	429a      	cmp	r2, r3
 8000214:	d3fc      	bcc.n	8000210 <main+0x94>
			*pPortBoutreg |= (1 << 1);
 8000216:	6802      	ldr	r2, [r0, #0]
 8000218:	f042 0202 	orr.w	r2, r2, #2
 800021c:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 800021e:	2200      	movs	r2, #0
 8000220:	3201      	adds	r2, #1
 8000222:	429a      	cmp	r2, r3
 8000224:	d3fc      	bcc.n	8000220 <main+0xa4>
			*pPortBoutreg &= ~(1 << 1);
 8000226:	6802      	ldr	r2, [r0, #0]
 8000228:	f022 0202 	bic.w	r2, r2, #2
 800022c:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 800022e:	2200      	movs	r2, #0
 8000230:	3201      	adds	r2, #1
 8000232:	429a      	cmp	r2, r3
 8000234:	d3fc      	bcc.n	8000230 <main+0xb4>
		uint16_t pin_status = (uint16_t)*pPortAinreg & (1 << 12); // zero out all the bits except bit 12
 8000236:	6822      	ldr	r2, [r4, #0]
		if(pin_status){
 8000238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800023c:	d1cb      	bne.n	80001d6 <main+0x5a>
			*pPortBoutreg |= (1 << 5);
 800023e:	6805      	ldr	r5, [r0, #0]
 8000240:	f045 0520 	orr.w	r5, r5, #32
 8000244:	6005      	str	r5, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 8000246:	3201      	adds	r2, #1
 8000248:	428a      	cmp	r2, r1
 800024a:	d3fc      	bcc.n	8000246 <main+0xca>
			*pPortBoutreg &= ~(1 << 5);
 800024c:	6802      	ldr	r2, [r0, #0]
 800024e:	f022 0220 	bic.w	r2, r2, #32
 8000252:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 8000254:	2200      	movs	r2, #0
 8000256:	3201      	adds	r2, #1
 8000258:	428a      	cmp	r2, r1
 800025a:	d3fc      	bcc.n	8000256 <main+0xda>
			*pPortBoutreg |= (1 << 0);
 800025c:	6802      	ldr	r2, [r0, #0]
 800025e:	f042 0201 	orr.w	r2, r2, #1
 8000262:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 8000264:	2200      	movs	r2, #0
 8000266:	3201      	adds	r2, #1
 8000268:	428a      	cmp	r2, r1
 800026a:	d3fc      	bcc.n	8000266 <main+0xea>
			*pPortBoutreg &= ~(1 << 0);
 800026c:	6802      	ldr	r2, [r0, #0]
 800026e:	f022 0201 	bic.w	r2, r2, #1
 8000272:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 8000274:	2200      	movs	r2, #0
 8000276:	3201      	adds	r2, #1
 8000278:	428a      	cmp	r2, r1
 800027a:	d3fc      	bcc.n	8000276 <main+0xfa>
			*pPortBoutreg |= (1 << 1);
 800027c:	6802      	ldr	r2, [r0, #0]
 800027e:	f042 0202 	orr.w	r2, r2, #2
 8000282:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 8000284:	2200      	movs	r2, #0
 8000286:	3201      	adds	r2, #1
 8000288:	428a      	cmp	r2, r1
 800028a:	d3fc      	bcc.n	8000286 <main+0x10a>
			*pPortBoutreg &= ~(1 << 1);
 800028c:	6802      	ldr	r2, [r0, #0]
 800028e:	f022 0202 	bic.w	r2, r2, #2
 8000292:	6002      	str	r2, [r0, #0]
	for(uint32_t i = 0 ; i < delay ; i++ );
 8000294:	2200      	movs	r2, #0
 8000296:	3201      	adds	r2, #1
 8000298:	428a      	cmp	r2, r1
 800029a:	d3fc      	bcc.n	8000296 <main+0x11a>
 800029c:	e797      	b.n	80001ce <main+0x52>
 800029e:	bf00      	nop
 80002a0:	5800004c 	.word	0x5800004c
 80002a4:	48000400 	.word	0x48000400
 80002a8:	48000010 	.word	0x48000010
 80002ac:	48000414 	.word	0x48000414
 80002b0:	00030d40 	.word	0x00030d40
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff47 	bl	800017c <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80002f4:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80002f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000304:	20000020 	.word	0x20000020

08000308 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	; (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	; (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	; (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
